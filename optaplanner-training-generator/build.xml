<?xml version="1.0" encoding="UTF-8"?>
<project name="optaplanner-training-generator" default="overwrite-all-labs" basedir=".">
  <description>
    OptaPlanner solves planning problems.
    This lightweight, embeddable planning engine implements powerful and scalable algorithms
    to optimize business resource scheduling and planning.

    This module generates and overwrites the training labs.
  </description>

  <!-- Keep in sync with optaplanner-training/pom.xml version -->
  <property name="project.version" value="7.0.0.Beta4-training-4"/>
  <property name="optaplanner.examples.dir" value="${basedir}/../../optaplanner/optaplanner-examples"/>

  <patternset id="example.cloudbalance.patternset">
    <include name="pom.xml"/>
    <include name=".gitignore"/>
    <include name="src/main/java/org/optaplanner/examples/common/"/>
    <include name="src/main/resources/logback.xml"/>
    <include name="src/main/resources/org/optaplanner/examples/common/"/>
    <!-- Specific stuff -->
    <include name="data/cloudbalancing/unsolved/"/>
    <include name="src/main/java/org/optaplanner/examples/cloudbalancing/app/CloudBalancingApp.java"/>
    <include name="src/main/java/org/optaplanner/examples/cloudbalancing/domain/"/>
    <include name="src/main/java/org/optaplanner/examples/cloudbalancing/optional/domain/"/>
    <include name="src/main/java/org/optaplanner/examples/cloudbalancing/optional/realtime/"/>
    <include name="src/main/java/org/optaplanner/examples/cloudbalancing/persistence/CloudBalancingDao.java"/>
    <include name="src/main/java/org/optaplanner/examples/cloudbalancing/swingui/"/>
    <include name="src/main/resources/org/optaplanner/examples/cloudbalancing/solver/"/>
    <include name="src/main/resources/org/optaplanner/examples/cloudbalancing/swingui/"/>
  </patternset>


  <target name="overwrite-all-labs" depends="overwrite-lab101, overwrite-lab102, overwrite-lab103, overwrite-lab901, overwrite-lab902"/>


  <target name="overwrite-lab101" depends="checks">
    <antcall target="overwrite-cloudBalance">
      <param name="lab.artifactId" value="optaplanner-training-lab101"/>
    </antcall>
    <antcall target="overwrite-cloudBalance">
      <param name="lab.artifactId" value="optaplanner-training-lab101-solution"/>
    </antcall>
    <concat destfile="${basedir}/../optaplanner-training-lab101-solution/src/main/resources/org/optaplanner/examples/cloudbalancing/solver/cloudBalancingScoreRules.drl" append="true">
      <![CDATA[

// ############################################################################
// Solution lab101
// ############################################################################

rule "atMost4ProcessesPerComputer"
  when
    $computer : CloudComputer()
    accumulate(
    $c : CloudProcess(computer == $computer);
      $count : count($c);
      $count > 4
    )
  then
    scoreHolder.addHardConstraintMatch(kcontext, 4 - $count.intValue());
end
]]>
    </concat>
  </target>


  <target name="overwrite-lab102" depends="checks">
    <antcall target="overwrite-cloudBalance">
      <param name="lab.artifactId" value="optaplanner-training-lab102"/>
    </antcall>
    <antcall target="overwrite-cloudBalance">
      <param name="lab.artifactId" value="optaplanner-training-lab102-solution"/>
    </antcall>
    <replaceregexp file="${basedir}/../optaplanner-training-lab102-solution/src/main/java/org/optaplanner/examples/cloudbalancing/domain/CloudProcess.java"
                   encoding="UTF-8"
                   match="}\s*$"
                   replace=""/>
    <concat destfile="${basedir}/../optaplanner-training-lab102-solution/src/main/java/org/optaplanner/examples/cloudbalancing/domain/CloudProcess.java" append="true">
      <![CDATA[
    // ############################################################################
    // Solution lab102
    // ############################################################################

    public boolean isHoggingCpuPower() {
        if (computer == null || computer.getCpuPower() <= 6) {
            return false;
        }
        return requiredCpuPower * 2 > computer.getCpuPower();
    }

    public int getHoggingCpuPowerAmount() {
        if (!isHoggingCpuPower()) {
            return 0;
        }
        return requiredCpuPower * 2 - computer.getCpuPower();
    }
}
]]>
    </concat>
    <concat destfile="${basedir}/../optaplanner-training-lab102-solution/src/main/resources/org/optaplanner/examples/cloudbalancing/solver/cloudBalancingScoreRules.drl" append="true">
      <![CDATA[

// ############################################################################
// Solution lab102
// ############################################################################

rule "hoggingCpuPower"
    when
        $p : CloudProcess(hoggingCpuPower == true)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $p.getHoggingCpuPowerAmount());
end
]]>
    </concat>
  </target>


  <target name="overwrite-lab103" depends="checks">
    <property name="lab.number" value="103" />
    <antcall target="overwrite-cloudBalance">
      <param name="lab.artifactId" value="optaplanner-training-lab103"/>
    </antcall>
    <antcall target="overwrite-cloudBalance">
      <param name="lab.artifactId" value="optaplanner-training-lab103-solution"/>
    </antcall>
    <replaceregexp file="${basedir}/../optaplanner-training-lab103-solution/src/main/resources/org/optaplanner/examples/cloudbalancing/solver/cloudBalancingScoreRules.drl"
                   encoding="UTF-8"
                   match="rule \&quot;requiredNetworkBandwidthTotal\&quot;[^£]*?end\n"
                   replace=""/>
    <replaceregexp file="${basedir}/../optaplanner-training-lab103-solution/src/main/resources/org/optaplanner/examples/cloudbalancing/solver/cloudBalancingScoreRules.drl"
                   encoding="UTF-8"
                   match="rule \&quot;computerCost\&quot;[^£]*?end\n"
                   replace=""/>
    <concat destfile="${basedir}/../optaplanner-training-lab103-solution/src/main/resources/org/optaplanner/examples/cloudbalancing/solver/cloudBalancingScoreRules.drl" append="true">
      <![CDATA[

// ############################################################################
// Solution lab103
// ############################################################################

rule "distributeNetworkBandwidthFairly"
    when
        $computer : CloudComputer()
        accumulate(
            CloudProcess(
                computer == $computer,
                $requiredNetworkBandwidth : requiredNetworkBandwidth);
            $total : sum($requiredNetworkBandwidth)
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - ($total * $total));
end
]]>
    </concat>
  </target>


  <target name="overwrite-cloudBalance">
    <property name="lab.directory" value="${basedir}/../${lab.artifactId}"/>
    <echo>Overwriting of ${lab.directory}</echo>
    <delete failonerror="false">
      <fileset dir="${lab.directory}" defaultexcludes="false">
        <patternset refid="example.cloudbalance.patternset"/>
      </fileset>
    </delete>
    <copy todir="${lab.directory}" overwrite="true">
      <fileset dir="${optaplanner.examples.dir}" defaultexcludes="false">
        <patternset refid="example.cloudbalance.patternset"/>
      </fileset>
    </copy>
    <replaceregexp file="${lab.directory}/pom.xml"
                   encoding="UTF-8"
                   match="&lt;parent&gt;[^£]*?&lt;/parent&gt;"
                   replace="&lt;parent&gt;&lt;groupId&gt;org.optaplanner.training&lt;/groupId&gt;&lt;artifactId&gt;optaplanner-training&lt;/artifactId&gt;&lt;version&gt;${project.version}&lt;/version&gt;&lt;/parent&gt;"/>
    <replaceregexp file="${lab.directory}/pom.xml"
                   encoding="UTF-8"
                   match="&lt;artifactId&gt;optaplanner\-examples&lt;/artifactId&gt;"
                   replace="&lt;artifactId&gt;${lab.artifactId}&lt;/artifactId&gt;"/>
    <replaceregexp file="${lab.directory}/pom.xml"
                   encoding="UTF-8"
                   match="&lt;name&gt;[^&lt;]*&lt;/name&gt;"
                   replace="&lt;name&gt;${lab.artifactId}&lt;/name&gt;"/>
    <replaceregexp file="${lab.directory}/pom.xml"
                   encoding="UTF-8"
                   match="&lt;description&gt;[^&lt;]*?&lt;/description&gt;"
                   replace="&lt;description&gt;${lab.artifactId}&lt;/description&gt;"
                   byline="false"/>
    <replaceregexp file="${lab.directory}/pom.xml"
                   encoding="UTF-8"
                   match="&lt;argument&gt;org.optaplanner.examples.app.OptaPlannerExamplesApp?&lt;/argument&gt;"
                   replace="&lt;argument&gt;org.optaplanner.examples.cloudbalancing.app.CloudBalancingApp&lt;/argument&gt;"
                   byline="false"/>
  </target>

  <target name="checks">
    <available file="${optaplanner.examples.dir}" property="optaplanner.examples.dir.available" />
    <fail unless="optaplanner.examples.dir.available"
          message="The optaplanner.examples.dir (${optaplanner.examples.dir}) does not exist." />
  </target>

  <target name="overwrite-lab901" depends="checks">
    <antcall target="overwrite-from-solution">
      <param name="lab.artifactId" value="optaplanner-training-lab901"/>
      <param name="lab.subpackageName" value="election"/>
    </antcall>
  </target>

  <target name="overwrite-lab902" depends="checks">
    <antcall target="overwrite-from-solution">
      <param name="lab.artifactId" value="optaplanner-training-lab902"/>
      <param name="lab.subpackageName" value="workerrostering"/>
    </antcall>
  </target>

  <target name="overwrite-from-solution">
    <property name="lab.directory" value="${basedir}/../${lab.artifactId}"/>
    <property name="lab-solution.directory" value="${basedir}/../${lab.artifactId}-solution"/>
    <echo>Overwriting of ${lab.directory}</echo>
    <delete failonerror="false">
      <fileset dir="${lab.directory}" defaultexcludes="false"/>
    </delete>
    <copy todir="${lab.directory}" overwrite="true">
      <fileset dir="${lab-solution.directory}" defaultexcludes="false">
        <patternset>
          <include name="pom.xml"/>
          <include name=".gitignore"/>
          <include name="data/${lab.subpackageName}/import/"/>
          <include name="src/main/java/org/optaplanner/training/${lab.subpackageName}/app/"/>
          <include name="src/main/java/org/optaplanner/training/${lab.subpackageName}/domain/"/>
          <include name="src/main/java/org/optaplanner/training/${lab.subpackageName}/persistence/"/>
          <include name="src/main/resources/logback.xml"/>
        </patternset>
      </fileset>
    </copy>
    <mkdir dir="${lab.directory}/data/${lab.subpackageName}/export/"/>
    <replaceregexp file="${lab.directory}/pom.xml"
                   encoding="UTF-8"
                   match="\-solution&lt;/artifactId&gt;"
                   replace="&lt;/artifactId&gt;"/>
    <replaceregexp encoding="UTF-8"
                   match="// LAB-SOLUTION-START[\s\S]*// LAB-SOLUTION-END"
                   replace="// TODO Implement this lab" flags="g">
      <fileset dir="${lab.directory}" defaultexcludes="true">
        <patternset>
          <include name="src/main/java/org/optaplanner/training/${lab.subpackageName}/**/*.java"/>
        </patternset>
      </fileset>
    </replaceregexp>
    <replaceregexp encoding="UTF-8"
                   match="\nimport org\.optaplanner\.core\..*;"
                   replace="" flags="g">
      <fileset dir="${lab.directory}" defaultexcludes="true">
        <patternset>
          <include name="src/main/java/org/optaplanner/training/${lab.subpackageName}/**/*.java"/>
        </patternset>
      </fileset>
    </replaceregexp>
    <replaceregexp encoding="UTF-8"
                   match="\nimport org\.optaplanner\.training\.${lab.subpackageName}\.optional\..*;"
                   replace="" flags="g">
      <fileset dir="${lab.directory}" defaultexcludes="true">
        <patternset>
          <include name="src/main/java/org/optaplanner/training/${lab.subpackageName}/domain/**/*.java"/>
        </patternset>
      </fileset>
    </replaceregexp>
    <replaceregexp encoding="UTF-8"
                   match="\n *\@Planning.*"
                   replace="" flags="g">
      <fileset dir="${lab.directory}" defaultexcludes="true">
        <patternset>
          <include name="src/main/java/org/optaplanner/training/${lab.subpackageName}/domain/**/*.java"/>
        </patternset>
      </fileset>
    </replaceregexp>
    <replaceregexp encoding="UTF-8"
                   match="\n *\@ProblemFact.*"
                   replace="" flags="g">
      <fileset dir="${lab.directory}" defaultexcludes="true">
        <patternset>
          <include name="src/main/java/org/optaplanner/training/${lab.subpackageName}/domain/**/*.java"/>
        </patternset>
      </fileset>
    </replaceregexp>
    <replaceregexp encoding="UTF-8"
                   match="\n *\@ValueRangeProvider.*"
                   replace="" flags="g">
      <fileset dir="${lab.directory}" defaultexcludes="true">
        <patternset>
          <include name="src/main/java/org/optaplanner/training/${lab.subpackageName}/domain/**/*.java"/>
        </patternset>
      </fileset>
    </replaceregexp>
    <replaceregexp encoding="UTF-8"
                   match="\n *private \w+Score score( = null)?;"
                   replace="" flags="g">
      <fileset dir="${lab.directory}" defaultexcludes="true">
        <patternset>
          <include name="src/main/java/org/optaplanner/training/${lab.subpackageName}/domain/**/*.java"/>
        </patternset>
      </fileset>
    </replaceregexp>
    <replaceregexp encoding="UTF-8"
                   match="\n *public \w+Score getScore\(\) *\{\n.*\n *\}\n"
                   replace="" flags="g">
      <fileset dir="${lab.directory}" defaultexcludes="true">
        <patternset>
          <include name="src/main/java/org/optaplanner/training/${lab.subpackageName}/domain/**/*.java"/>
        </patternset>
      </fileset>
    </replaceregexp>
    <replaceregexp encoding="UTF-8"
                   match="\n *public void setScore\(\w+ \w+\) *\{\n.*\n *\}\n"
                   replace="" flags="g">
      <fileset dir="${lab.directory}" defaultexcludes="true">
        <patternset>
          <include name="src/main/java/org/optaplanner/training/${lab.subpackageName}/domain/**/*.java"/>
        </patternset>
      </fileset>
    </replaceregexp>
  </target>

</project>
